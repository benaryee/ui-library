[{"/home/bernard/lib-app/src/components/button/button.stories.tsx":"1","/home/bernard/lib-app/src/components/button/button.tsx":"2","/home/bernard/lib-app/src/components/button/styled.ts":"3","/home/bernard/lib-app/src/config/sizes.ts":"4"},{"size":877,"mtime":1608269763577,"results":"5","hashOfConfig":"6"},{"size":2264,"mtime":1608266577161,"results":"7","hashOfConfig":"6"},{"size":2192,"mtime":1608270696114,"results":"8","hashOfConfig":"6"},{"size":290,"mtime":1608270504736,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1vxjulj",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bernard/lib-app/src/components/button/button.stories.tsx",["21"],"import React from 'react';\n// also exported from '@storybook/react' if you can deal with breaking changes in 6.1\nimport { Story, Meta } from '@storybook/react/types-6-0';\n\nimport Button,{ ButtonProps } from './button';\nimport ArrowIcon from '../../icons/arrow.svg';\n\nexport default {\n  title: 'Components/Button',\n  component: Button,\n} as Meta;\n\nconst Template: Story<ButtonProps> = (args) => <Button {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  children : 'Default Button',\n  type: 'default'\n};\n\nexport const DangerButton = Template.bind({});\nDangerButton.args = {\n  children: 'Danger Button',\n  type: 'danger',\n};\n\n\nexport const SuccessButton = Template.bind({});\nSuccessButton.args = {\n  children: 'Success Button',\n  type: 'success',\n};\n\n\nexport const Loading = Template.bind({});\nLoading.args = {\n  children: 'Button',\n  loading: true,\n};\n\n",["22","23"],"/home/bernard/lib-app/src/components/button/button.tsx",["24","25"],"import React, {ElementType, MouseEventHandler, MutableRefObject, ReactNode} from \"react\";\nimport {StyledButton} from \"./styled\";\n\nexport  type ButtonType = 'default' | 'danger' | 'ghost' | 'success' | 'secondary';\nexport type ComponentSize = 'small' | 'default' | 'large';\n\ninterface BaseButtonProps {\n    type ?: ButtonType;\n    icon ?: ElementType;\n    size ?: ComponentSize;\n    className ?: string;\n    children ? :ReactNode;\n    disabled ?:boolean;\n    loading ?:boolean;\n\n}\n\n\ntype HTMLButtonProps = {\n    onClick ?: MouseEventHandler<HTMLButtonElement>;\n} & BaseButtonProps;\n\ntype HTMLAnchorProps = {\n    href? : string;\n}& BaseButtonProps;\n\n\ntype CustomNodeProps = {\n    as ?: ElementType;\n    to ?: string;\n} & BaseButtonProps;\n\nexport type ButtonProps = HTMLButtonProps & HTMLAnchorProps & CustomNodeProps;\n\nconst Button : React.ForwardRefRenderFunction<unknown, ButtonProps> = (props, ref) => {\n    const{\n        type = 'default',\n        icon,\n        size = 'default',\n        className = '',\n        children,\n        disabled,\n        loading = false,\n        onClick,\n        href,\n        as,\n        to\n    } = props;\n\n    const styles ={\n        innerType:type,\n        size,\n        disabled,\n        withText : children !== null\n\n    }\n\n    if(as){\n        return(\n            <StyledButton\n                as={as}\n                to={to}\n                ref={ref}\n                className={className}\n                {...styles}\n            >\n            </StyledButton>\n        )\n    }\n\n    if(href){\n        return(\n            <StyledButton\n                as='a'\n                href={href}\n                ref={ref as React.MutableRefObject<HTMLAnchorElement>}\n                className={className}\n                {...styles}\n            >\n                {loading ? 'Loading...' : children}\n\n            </StyledButton>\n        )\n    }\n\n    return (\n        <StyledButton\n            as='button'\n            type='button'\n            onClick={onClick}\n            ref={ref as React.MutableRefObject<HTMLButtonElement>}\n            className={className}\n            {...styles}\n        >\n            {loading ? 'Loading...' : children}\n\n        </StyledButton>\n    )\n}\n\nexport default React.forwardRef<unknown, ButtonProps>(Button);\n\n\n","/home/bernard/lib-app/src/components/button/styled.ts",[],"/home/bernard/lib-app/src/config/sizes.ts",[],{"ruleId":"26","severity":1,"message":"27","line":6,"column":8,"nodeType":"28","messageId":"29","endLine":6,"endColumn":17},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"26","severity":1,"message":"34","line":1,"column":48,"nodeType":"28","messageId":"29","endLine":1,"endColumn":64},{"ruleId":"26","severity":1,"message":"35","line":38,"column":9,"nodeType":"28","messageId":"29","endLine":38,"endColumn":13},"@typescript-eslint/no-unused-vars","'ArrowIcon' is defined but never used.","Identifier","unusedVar","no-native-reassign",["36"],"no-negated-in-lhs",["37"],"'MutableRefObject' is defined but never used.","'icon' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]